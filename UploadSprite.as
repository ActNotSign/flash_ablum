package{	import flash.display.*;	import flash.events.*;	import flash.filters.*;	import flash.geom.Rectangle;	import flash.net.*;	import flash.system.Security;	import flash.text.*;	import flash.display.BitmapData;	import flash.display.Bitmap;	import flash.geom.Matrix;	import flash.utils.ByteArray;	import flash.external.ExternalInterface;		public class UploadSprite extends Sprite{		private var _bgMain:Rectangle;		private var _grag:uint;		private var _boxSpriteArray:Array = new Array();		private var _filelist:FileReferenceList;		private var _filerList:Array ;		private var _uploadfiles:Boolean = false;		private var _iter:uint =  0;		private var tmpPro:Sprite ;		private var _max:uint=0;		private  var UPLOAD_URL:String=null;		//模式				private var SIMPLE_MOD:String = "simple";		private var ABLUM_MOD:String = "ablum";		private var _mod:String = ABLUM_MOD;				public function UploadSprite(uploadurl:String){						UPLOAD_URL = uploadurl;			initGUI();					}						public function initGUI(){			if(_mod == ABLUM_MOD){				_bgMain = new Rectangle(5,5,870,550);				InitPicThumb(18);							}else if(_mod == SIMPLE_MOD){				_bgMain = new Rectangle(5,5,300,200);								InitPicThumb(1);						}						_grag = 0xdedede;						DrawUI();			addEvent();					}				private function DrawUI(){			//背景			this.graphics.lineStyle(1,_grag);			this.graphics.beginFill(0xffffff);			this.graphics.drawRect(_bgMain.x,_bgMain.y,_bgMain.width,_bgMain.height);			this.graphics.endFill();			//title  			var fillType:String = GradientType.LINEAR;  			var colors:Array = [0xFFFFFF, 0xfbfbfb];  			var alphas:Array = [1, 1];  			var ratios:Array = [0x00, 0xFF]; 			var matr:Matrix = new Matrix();			matr.createGradientBox(10, 40, (1/2)*Math.PI, 0, 0);			var spreadMethod:String = SpreadMethod.PAD;			this.graphics.lineStyle(0,0,0);  			this.graphics.beginGradientFill(fillType, colors, alphas, ratios, matr, spreadMethod);    			this.graphics.drawRect(_bgMain.x+1,_bgMain.y+1,_bgMain.width-2,35);			//title			this.graphics.beginFill(0xfbfbfb);  			this.graphics.drawRect(_bgMain.x+1,_bgMain.y+37,_bgMain.width-2,2);				this.graphics.endFill();			//选择照片			var but  = new ButtonX(75,22,"选择照片",0xffffff);			if(_mod == ABLUM_MOD){				but.x = 20;				but. y = 13;			}else if(_mod == SIMPLE_MOD){				but.x = 180;				but. y = 70;			}						but.callBack = upLoadpic ;//设置回调函数			addChild(but);			//选择照片			var uploadButton  = new ButtonX(100,40,"上传照片",0xffffff,16,true);			if(_mod == ABLUM_MOD){				uploadButton.x = 385;				uploadButton.y = 490;							}else if(_mod == SIMPLE_MOD){				uploadButton.x = 180;				uploadButton.y = 140;							}			uploadButton.callBack = uploadFiles;			addChild(uploadButton);			//label warning;					var _titleText:TextField = null;			if(_mod == ABLUM_MOD){				_titleText = getLabel("上传照片单张不能超过2M",getTextFormat(0xa2a2a2,13));									_titleText.x = 110;				_titleText.y = 16;			}else if(_mod == SIMPLE_MOD){				_titleText = getLabel("图片上传",getTextFormat(0xa2a2a2,13));													_titleText.x = 130;				_titleText. y = 16;			}						addChild(_titleText);		}				//初始化当前上传图片缩量图		private function InitPicThumb(num:uint){			for(var i = 0,b=0,c=1; i<num;i++,c++){				var tmp  = new BoxSprite(String(i+1),UPLOAD_URL);				tmp.x = 20+(c-1)*140 ;				tmp.y = 60 + b*140 ;				_boxSpriteArray.push(tmp);				if((i+1)%6==0){					b++;					c=0;				}			}						for (i = 0 ; i<_boxSpriteArray.length ; i++){				addChild(_boxSpriteArray[i]);			}		}				private function getTextFormat(color:uint=0x000000,size:uint = 12,bold:Boolean=false):TextFormat {   			var format:TextFormat = new TextFormat();   			format.font = "黑体";   			format.color = color;   			format.size = size;   			format.bold = bold;   			format.leading = 5;			return format;   		}   				private function getLabel(label:String, format:TextFormat, selectable:Boolean = false, autoSize:Boolean = true):TextField {            			var lbl:TextField = new TextField();   			lbl.selectable = selectable;   			lbl.defaultTextFormat = format;   			if(autoSize){   				lbl.autoSize = TextFieldAutoSize.LEFT;   			}   			lbl.text = label;   			return lbl;   		}				//消息初始化		private function addEvent(){			_filelist = new FileReferenceList();			_filerList = new Array();			_filerList.push(new FileFilter("图片文件(*.jpg, *.jpeg, *.png,*.gif)", "*.jpg;*.jpeg;*.gif;*.png"));			_filerList.push(new FileFilter("*.jpg", "*.jpg;*.jpeg"));			_filerList.push(new FileFilter("*.png", "*.png"));			_filerList.push(new FileFilter("*.gif", "*.gif"));			_filelist.addEventListener(Event.SELECT,fileHandler);			_filelist.addEventListener(Event.COMPLETE,fileHandler);			this.addEventListener(Event.ENTER_FRAME,frameHandler);		}				//上传按钮回调函数		public function upLoadpic(){			if(!_uploadfiles)				_filelist.browse(_filerList);		}				private function fileHandler(event:Event):void {   			switch(event.type) {   				case Event.COMPLETE:					break;   				case DataEvent.UPLOAD_COMPLETE_DATA:   					break;   				case Event.SELECT:   					var fileLength = _filelist.fileList.length;					for(var t = 0 ; t<fileLength;t++){						if((_filelist.fileList[t].size/1024)>2*1024){							ExternalInterface.call("MsgBox", "单张相片不能操过2M");							return;						}					}										for(var b = 0 ; b<_boxSpriteArray.length;b++){							if(fileLength<b){								return ;							}							for(var i = 0 ; i<_boxSpriteArray.length;i++){								if(!_boxSpriteArray[i].hasData){									_boxSpriteArray[i].addPicFile(_filelist.fileList[b]);									break;								}							}					}										break;   				case Event.OPEN:   					break;   				case ProgressEvent.PROGRESS:     					break;   				case SecurityErrorEvent.SECURITY_ERROR:   				case IOErrorEvent.IO_ERROR:   				case HTTPStatusEvent.HTTP_STATUS: 					break;   			}  		}   				private function uploadFiles(){			trace(_uploadfiles);			if(!_uploadfiles){				for(var i=0;i<_boxSpriteArray.length;i++){					if(_boxSpriteArray[i].hasData && !_boxSpriteArray[i].uploadOver)						_max++;				}				_uploadfiles = true;			}		}				private function uploadfile(_iter:uint){			if(!_boxSpriteArray[_iter].hasData)				return ;									_boxSpriteArray[_iter].uploadFile(JSApi.getData());			tmpPro = _boxSpriteArray[_iter].ProgressBox(_iter+1,_max);			tmpPro.x = _bgMain.width/2-tmpPro.width/2;			tmpPro.y = _bgMain.height/2-tmpPro.height/2								addChild(tmpPro);					}				private function frameHandler(event:Event){					if(_iter<=_boxSpriteArray.length && _uploadfiles ){				if(_iter==0){					uploadfile(_iter)					_iter++;					return;				}else if(_boxSpriteArray[_iter-1].uploadOver){					try{						removeChild(tmpPro);						uploadfile(_iter)					}catch(error:Error){						_uploadfiles = false;						JSApi.finishAll();					}					_iter++;				}			}else{								_iter = 0 ;				_uploadfiles = false;							}					}	}}