package{		import flash.display.*;	import flash.events.*;	import flash.filters.*;	import flash.geom.Rectangle;	import flash.net.*;	import flash.system.Security;	import flash.text.*;	import flash.display.BitmapData;	import flash.display.Bitmap;	import flash.geom.Matrix;	import flash.utils.ByteArray;	import fl.controls.ProgressBar;		public class BoxSprite extends Sprite{		private var _bgRect:Rectangle;		private var _grag : uint;		public var _text:String;		private var _file:FileReference ;		private var UPLAOD_URL :String = null;		private var _loader:Loader;		public var hasData:Boolean = false;		private var loadedPic:Sprite;		public var delButton:Sprite ;		public var sButton:Sprite ;		public var status:String;		public var uploadOver:Boolean = false;		private var _progress:ProgressBar;		private var _myPro:Sprite;				public function BoxSprite(bgText:String,uploadURl:String=""){			_bgRect = new Rectangle(0,0,130,130);			_grag = 0xdedede;			_text = bgText;			status = "FILE_CACHE";			this.UPLAOD_URL = uploadURl;			DrawUi();		}				public function DrawUi(){			//背景			this.graphics.lineStyle(1,_grag);			this.graphics.beginFill(0xfbfbfb);			this.graphics.drawRect(_bgRect.x,_bgRect.y,_bgRect.width,_bgRect.height);			this.graphics.endFill();			var txt:TextField= getLabel(_text,getTextFormat(0xf5f5f5,72));			txt.x=65 - txt.textWidth/2;			txt.y = 30;			addChild(txt);			loadedPic = new Sprite();			loadedPic.addEventListener(MouseEvent.MOUSE_OVER,loadedPicMouseOver);			loadedPic.addEventListener(MouseEvent.MOUSE_OUT,loadedPicMouseOut);						delButton = getCircleButton("X",0xde533c, 2);						delButton.addEventListener(MouseEvent.CLICK,delClick);						sButton = getCircleButton("√");			sButton.x=118;			sButton.y=-10;						sButton.visible = false;						addChild(sButton);								delButton.visible = false;						loadedPic.addChild(delButton);			addChild(loadedPic);						this.setChildIndex(sButton,this.numChildren-1);					}		private function getTextFormat(color:uint=0x000000,size:uint = 12,bold:Boolean=false):TextFormat {   			var format:TextFormat = new TextFormat();   			format.font = "宋体";   			format.color = color;   			format.size = size;   			format.bold = bold;   			format.leading = 5;			return format;   		}   				private function getLabel(label:String, format:TextFormat, selectable:Boolean = false, autoSize:Boolean = true):TextField {            			var lbl:TextField = new TextField();   			lbl.selectable = selectable;   			lbl.defaultTextFormat = format;   			if(autoSize){   				lbl.autoSize = TextFieldAutoSize.LEFT;   			}   			lbl.text = label;   			return lbl;   		}		public function addPicFile(file:FileReference){			try{				_file =FileReference(file);				_file.addEventListener(Event.COMPLETE, fileHandler);   				_file.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA, fileHandler);   				_file.addEventListener(Event.SELECT, fileHandler);   				_file.addEventListener(Event.OPEN, fileHandler);               				_file.addEventListener(ProgressEvent.PROGRESS, fileHandler);   				_file.addEventListener(SecurityErrorEvent.SECURITY_ERROR, fileHandler);   				_file.addEventListener(IOErrorEvent.IO_ERROR, fileHandler);   				_file.addEventListener(HTTPStatusEvent.HTTP_STATUS, fileHandler);   				_file.load();				status = "FILE_CACHE";				hasData =true;				uploadOver = false;								_loader = new Loader();				_loader.contentLoaderInfo.addEventListener(Event.COMPLETE, loadHandler);   				this.addChild(_loader); 				loadedPic.alpha = 1;				loadedPicBgReset(0.5);				this.setChildIndex(loadedPic,this.numChildren-1);							}catch(error:Error){				trace(error);			}					}		private function fileHandler(event:Event):void {   			trace(event);			switch(event.type) {   				case Event.COMPLETE:   					if(status == "FILE_CACHE"){						sButton.visible = false ;												_loader.loadBytes(_file.data);					}else{						uploadOver = true;						sButton.visible = true ;					}					break;   				case DataEvent.UPLOAD_COMPLETE_DATA:   						//JSApi.finishOne((event as DataEvent).data.toString());									break;   				case Event.SELECT:   					break;   				case Event.OPEN:   					break;   				case ProgressEvent.PROGRESS:   					if(status == "FILE_UPLOAD"){						var pEvent:ProgressEvent = event as ProgressEvent;  						loadedPic.graphics.clear();						loadedPic.graphics.beginFill(0xd2dad2,0.5);						loadedPic.graphics.drawRect(_bgRect.x,_bgRect.y,_bgRect.width,(_bgRect.height-(_bgRect.height)*(pEvent.bytesLoaded/pEvent.bytesTotal)));						loadedPic.graphics.endFill();											}					break;   				case SecurityErrorEvent.SECURITY_ERROR:   				case IOErrorEvent.IO_ERROR:   				case HTTPStatusEvent.HTTP_STATUS: 					trace(event);					break;   			}  		} 				private function loadHandler(event:Event):void {   						_loader.scaleX = _loader.scaleY = 1;   			var w:uint = _loader.width;   			var h:uint = _loader.height; 			if (w > _bgRect.width || h > _bgRect.height) {                 				var ip:Number = w / h;   				var lp:Number = (_bgRect.width-10) / (_bgRect.height-10);            				_loader.width = (ip > lp)?(_bgRect.width-10):(_bgRect.height-10)*ip;   				_loader.height = (ip > lp)?(_bgRect.width-10) / ip:(_bgRect.height-10);   			}   			_loader.x = _bgRect.x + ((_bgRect.width-10) - _loader.width) / 2+5;   			_loader.y = _bgRect.y + ((_bgRect.height-10) - _loader.height) / 2+5;             			_loader.visible = true; 		}  				public function uploadFile(data:Object){			var uploadURL = new URLRequest();			var postArg = new URLVariables();			postArg.data=data;			postArg.session = stage.loaderInfo.parameters["session"];			uploadURL.method = URLRequestMethod.POST;			uploadURL.data = postArg;			uploadURL.url = UPLAOD_URL;						_file.upload(uploadURL,"file");						status = "FILE_UPLOAD";					}		private function loadedPicBgReset(alp:Number,move:Boolean = false){			loadedPic.graphics.clear();						if(!move){				delButton.visible = false;				loadedPic.graphics.beginFill(0xd2dad2,alp);				loadedPic.graphics.drawRect(_bgRect.x,_bgRect.y,_bgRect.width,_bgRect.height);				loadedPic.graphics.endFill();							}else{				delButton.visible = true;								loadedPic.graphics.lineStyle(3,0xbcdaa8);				loadedPic.graphics.beginFill(0xd2dad2,alp);				loadedPic.graphics.drawRect(_bgRect.x-3,_bgRect.y-3,_bgRect.width+6,_bgRect.height+6);				loadedPic.graphics.endFill();							}					}		public function getCircleButton(txt:String,backgroundColor:uint=0xde533c,textX:uint = 1, textY:uint = -1 ):Sprite{						var circleWidth:uint = 8 ; 			var circleHeight:uint = 8;			var but:Sprite = new Sprite();			var fillType:String = GradientType.LINEAR ;  			var colors:Array = [backgroundColor, backgroundColor];  			var alphas:Array = [1, 1];  			var ratios:Array = [0x0, 0xff]; 			var matr:Matrix = new Matrix();			matr.createGradientBox(circleWidth, circleHeight, (3/2)*Math.PI, 0, 0);			var spreadMethod:String = SpreadMethod.PAD;						but.graphics.lineStyle(0.6, backgroundColor, 1 , true, LineScaleMode.VERTICAL,                               CapsStyle.NONE, JointStyle.MITER, 10);			but.graphics.beginGradientFill(fillType, colors, alphas, ratios, matr, spreadMethod);  							but.graphics.drawCircle(circleWidth, circleHeight,10);			but.x=120;			but.y=-10;			but.buttonMode = true;			but.useHandCursor = true;			var txtField:TextField= getLabel(txt,getTextFormat(0xffffff,14,true));			txtField.x= textX;			txtField.y = textY;			txtField.mouseEnabled = false;			but.addChild(txtField);									return but;		}		private function loadedPicMouseOver(event:Event){			if(hasData && !uploadOver)				loadedPicBgReset(0,true);		}		private function loadedPicMouseOut(event:Event){			if(hasData && !uploadOver)				loadedPicBgReset(0.5);		}		private function delClick(event:Event){			hasData = false;			_loader.visible = false;			loadedPic.alpha= 0;		}				public function ProgressBox(nowNum:uint,maxNum:uint){			_myPro = new Sprite();			var proRect = new Rectangle(0,0,420,50);			_progress = new ProgressBar();			var bg_pro = new Sprite();			bg_pro.graphics.beginFill(0x000000,0.2)			bg_pro.graphics.drawRoundRect(0,0,proRect.width,proRect.height,12,12);			bg_pro.graphics.endFill();			bg_pro.graphics.beginFill(0xffffff,1)			bg_pro.graphics.drawRect(6,6,proRect.width-12,proRect.height-12);			bg_pro.graphics.endFill();									//进度条			_progress.move(0,100);			_progress.x = 20;			_progress.y = (proRect.height/2)-5;			_progress.width = 250;			_progress.height = 10;			_progress.source  = _file;			//提示			var tmpStr = "正在上次第"+nowNum+"张(共"+maxNum+")";			var txt:TextField= getLabel(tmpStr,getTextFormat(0xa2a2a2,12));			txt.x=proRect.width - txt.textWidth-20;			txt.y = (proRect.height/2)-txt.textHeight/2;			bg_pro.addChild(txt);						bg_pro.addChild(_progress);			_myPro.addChild(bg_pro);			return _myPro;		}	}}